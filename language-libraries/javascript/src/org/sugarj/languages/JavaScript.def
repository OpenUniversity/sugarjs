definition

%% ECMA-262 ECMAScript 5.1
%%  Missing full Unicode support

%% Known bugs:
%% "{} [0]" and "function x() {} [0]" should both parse as two statements
%%    but they produce ambiguous results 
    
%% Layout
module javascript-51/Layout
  exports
      
    %% 7.2 Whitespace    
    lexical syntax
      %% [\ \t\12\r\n] -> LAYOUT
    
    context-free restrictions
      LAYOUT? -/- [\ \t\12\n\r]

    %% 7.3 Line Terminators
    sorts
      LineTerminatorSequence CR
      
    lexical syntax
      [\n]     -> LineTerminatorSequence
      CR       -> LineTerminatorSequence
      [\r][\n] -> LineTerminatorSequence
      [\r]     -> CR
      
    lexical restrictions
      CR -/- [\n]

    %% 7.4 Comments
    sorts
      Asterisk
      
    lexical syntax      
      "//" ~[\r\n]* LineTerminatorSequence -> LAYOUT
      "/*" (~[\*] | Asterisk)* "*/"        -> LAYOUT
      [\*]                                 -> Asterisk

    lexical restrictions
      Asterisk -/- [\/]

    context-free restrictions
      LAYOUT? -/- [\/]/[\/]
      LAYOUT? -/- [\/].[\*]

%% 7.6 Identifiers; No Unicode escape support
%% 7.6.1 Reserved Words
module javascript-51/Identifiers
  exports
    
    sorts
      Identifier IdentifierName Keyword FutureReservedWord  ReservedWord 
      
    context-free syntax
      IdentifierName -> Identifier {cons("Identifier")}
      ReservedWord -> Identifier {reject}
        
    lexical syntax
      [A-Za-z\$\_][A-Za-z0-9\$\_]*  -> IdentifierName
    
    lexical restrictions
      IdentifierName -/- [A-Za-z0-9\$\_]
    
    lexical syntax
      "break"      -> Keyword
      "case"       -> Keyword
      "catch"      -> Keyword
      "continue"   -> Keyword
      "debugger"   -> Keyword
      "default"    -> Keyword
      "delete"     -> Keyword
      "do"         -> Keyword
      "else"       -> Keyword
      "finally"    -> Keyword
      "for"        -> Keyword
      "function"   -> Keyword
      "if"         -> Keyword
      "in"         -> Keyword
      "instanceof" -> Keyword
      "new"        -> Keyword
      "return"     -> Keyword
      "switch"     -> Keyword
      "this"       -> Keyword
      "throw"      -> Keyword
      "try"        -> Keyword
      "typeof"     -> Keyword
      "var"        -> Keyword
      "void"       -> Keyword
      "while"      -> Keyword
      "with"       -> Keyword
      
      "class"      -> FutureReservedWord
      "const"      -> FutureReservedWord
      "enum"       -> FutureReservedWord
      "export"     -> FutureReservedWord
      "extends"    -> FutureReservedWord
      "import"     -> FutureReservedWord
      "super"      -> FutureReservedWord
      "implements" -> FutureReservedWord
      "interface"  -> FutureReservedWord
      "let"        -> FutureReservedWord
      "package"    -> FutureReservedWord
      "private"    -> FutureReservedWord
      "protected"  -> FutureReservedWord
      "public"     -> FutureReservedWord
      "static"     -> FutureReservedWord
      "yeild"      -> FutureReservedWord

      Keyword            -> ReservedWord
      FutureReservedWord -> ReservedWord
      "null"             -> ReservedWord
      "true"             -> ReservedWord
      "false"            -> ReservedWord
      
      lexical restrictions
        "break" "case" "catch" "continue" "debugger" "default" "delete" "do" "else"        
        "finally" "for" "function" "if" "in" "instanceof" "new" "return" "switch"      
        "this" "throw" "try" "typeof" "var" "void" "while" "with" "class" "const"       
        "enum" "export" "extends" "import" "super" "implements" "interface" "let"         
        "package" "private" "protected" "public" "static" "yeild" "null" "true" 
        "false" -/- [A-Za-z0-9\$\_]

%% 7.8 Literals        
%% 7.8.1 Null Literals
%% 7.8.2 Boolean Literals
%% 7.8.3 Numeric Literals
%% 7.8.4 String Literals
%% 7.8.5 Regular Expression Literals
module javascript-51/Literals
  exports
    
    sorts
      Literal NullLiteral BooleanLiteral NumericLiteral StringLiteral RegExpLiteral
      
    context-free syntax
      NullLiteral    -> Literal
      BooleanLiteral -> Literal {cons("Boolean")}
      NumericLiteral -> Literal {cons("Number")}
      StringLiteral  -> Literal {cons("String")}
      RegExpLiteral  -> Literal {cons("RegExp")}
      
      "null"    -> NullLiteral {cons("Null")}
      "true"    -> BooleanLiteral {cons("True")}
      "false"   -> BooleanLiteral {cons("False")}

      DecimalLiteral    -> NumericLiteral {cons("Decimal")}
      HexIntegerLiteral -> NumericLiteral {cons("HexInt")}
    
    sorts
      DecimalIntegerLiteral DecimalLiteral ExponentPart SignedInteger HexIntegerLiteral
                
    lexical syntax
      "0"         -> DecimalIntegerLiteral
      [1-9][0-9]* -> DecimalIntegerLiteral
      
      
      DecimalIntegerLiteral "." [0-9]* ExponentPart? -> DecimalLiteral
      "." [0-9]+ ExponentPart?                       -> DecimalLiteral
      DecimalIntegerLiteral ExponentPart?            -> DecimalLiteral
      
      [eE] SignedInteger -> ExponentPart
      [\+\-]? [0-9]+     -> SignedInteger
      
      [0][xX][0-9a-fA-F]+ -> HexIntegerLiteral
      
    lexical restrictions
      DecimalIntegerLiteral DecimalLiteral SignedInteger -/- [0-9]
      HexIntegerLiteral -/- [0-9a-fA-F]
      
    sorts
      DoubleQuotedString SingleQuotedString DoubleStringChar SingleStringChar EscapeSequence Zero
        
    context-free syntax
      DoubleQuotedString  -> StringLiteral {cons("DoubleQuotedString")}
      SingleQuotedString  -> StringLiteral {cons("SingleQuotedString")}
        
    lexical syntax
      [\"] DoubleStringChar* [\"] -> DoubleQuotedString
      [\'] SingleStringChar* [\'] -> SingleQuotedString

      ~[\"\\\r\n]                 -> DoubleStringChar
      [\\] EscapeSequence         -> DoubleStringChar
      [\\] LineTerminatorSequence -> DoubleStringChar
      
      ~[\'\\\r\n]                 -> SingleStringChar
      [\\] EscapeSequence         -> SingleStringChar
      [\\] LineTerminatorSequence -> SingleStringChar
      
      Zero                                            -> EscapeSequence
      ~[0-9xu\r\n]                                    -> EscapeSequence
      [x][0-9a-fA-F][0-9a-fA-F]                       -> EscapeSequence
      [u][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F] -> EscapeSequence
      
      [0] -> Zero
      
    lexical restrictions
      Zero -/- [0-9]
    
    sorts
      RegExpBody RegExpFlags RegExpFirstChar RegExpChar RegExpBackslashSeq RegExpClass RegExpClassChar
      
    lexical syntax
      "/" RegExpBody "/" RegExpFlags -> RegExpLiteral

      RegExpFirstChar RegExpChar*    -> RegExpBody
      ~[\*\\\/\[\n\r]                -> RegExpFirstChar
      RegExpBackslashSeq             -> RegExpFirstChar
      RegExpClass                    -> RegExpFirstChar
      RegExpFirstChar                -> RegExpChar
      [\*]                           -> RegExpChar

      "\\" ~[\n\r]                   -> RegExpBackslashSeq

      "[" RegExpClassChar* "]"       -> RegExpClass
      ~[\]\\\n\r]                    -> RegExpClassChar
      RegExpBackslashSeq             -> RegExpClassChar

      [A-Za-z0-9\_\$]*               -> RegExpFlags
      
    lexical restrictions
      RegExpFlags -/- [A-Za-z0-9\_\$]
      
%% 7.9 Automatic Semicolon Insertion
%% Any statement that requires auto semicolon insertion should -> AutoSemiStatement 
%% Other statements should -> Statement
module javascript-51/AutoSemiInsertion
  exports
   
    sorts
      SemiStatement AutoSemiStatement EOL EOB EOF
      
    context-free syntax 
      SemiStatement         -> Statement {longest-match}

      AutoSemiStatement ";" -> SemiStatement {cons("SemiStm")}
      
      %% These all have empty final productions to ensure that LAYOUT is consumed
      %% But it creates ambiguity that has to be resolved
      %% Would have liked to have used layout constraints but they are ignored on empty productions
      %% EOLStm - statement without semicolon followed by newline
      %% EOFStm - statement without semicolon followed by end of file, no newline
      %% EOBStm - statement without semicolon followed by } before any newline
      AutoSemiStatement EOL -> SemiStatement {cons("EOLStm"), enforce-newline, prefer}
      AutoSemiStatement EOF -> SemiStatement {cons("EOFStm")}
      AutoSemiStatement EOB -> SemiStatement {cons("EOBStm"), avoid}
      
    lexical syntax
      -> EOL
      -> EOB 
      -> EOF
      
    lexical restrictions
      EOB -/- ~[\}]
      EOF -/- ~[]
 
%% 11 Expressions
module javascript-51/Expressions
  exports

    sorts 
      InExpression AssignmentExpression
      ArraySubscript Choice
  
    %% 11.1 Primary Expressions
    sorts
      Expression ArrayLiteral ArrayElement ObjectLiteral PropertyAssignment PropertyName Parenthesis
          
    context-free syntax
      "this"             -> Expression {cons("This")}
      Identifier         -> Expression
      Literal            -> Expression
      ArrayLiteral       -> Expression
      ObjectLiteral      -> Expression
      "(" Expression ")" -> Expression {cons("Parenthesis")}

      "[" "]"                     -> ArrayLiteral {cons("Array"), prefer}
      "[" {ArrayElement ","}+ "]" -> ArrayLiteral {cons("Array")}
      
                           -> ArrayElement {cons("EmptyElement")}
      AssignmentExpression -> ArrayElement {cons("Element")}
            
      "{" {PropertyAssignment ","}* "}"     -> ObjectLiteral {cons("Object")}
      "{" {PropertyAssignment ","}* "," "}" -> ObjectLiteral {cons("Object")}
      
      PropertyName ":" AssignmentExpression                      -> PropertyAssignment {cons("PropertyAssignment")}
      "get" PropertyName "(" ")" "{" FunctionBody "}"            -> PropertyAssignment {cons("PropertyGet")}
      "set" PropertyName "(" Identifier ")" "{" FunctionBody "}" -> PropertyAssignment {cons("PropertySet")}
      
      IdentifierName -> PropertyName
      StringLiteral  -> PropertyName
      NumericLiteral -> PropertyName

    %% 11.2 Left-Hand-Side Expressions
    sorts
      Arguments MemberName LeftHandSideExpression ArraySubscript NewExpression CallExpression
      
    context-free syntax
      FunctionExpression         -> Expression
      Expression ArraySubscript  -> Expression {cons("ArrayAccess")}
      Expression "." MemberName  -> Expression {cons("MemberAccess")}
      "new" Expression Arguments -> Expression {cons("NewArgs")}
      
      %% Ambiguity with NewArgs, New, Call, Call[x], Call.x is difficult to address with priorities
      %% So we use NewExpression/CallExpression to keep them apart
      "new" Expression              -> NewExpression {cons("New")}
      NewExpression                 -> Expression
      Expression Arguments          -> CallExpression {cons("Call")}
      CallExpression ArraySubscript -> CallExpression {cons("ArrayAccess")}
      CallExpression "." MemberName -> CallExpression {cons("MemberAccess")}
      CallExpression                -> Expression

      Expression                    -> LeftHandSideExpression
      
      "(" {AssignmentExpression ","}* ")" -> Arguments {cons("Args")}
      
      "[" Expression "]" -> ArraySubscript {cons("Subscript")}
      
      IdentifierName -> MemberName {cons("MemberName")}

    %% 11.3 Postfix Expressions      
    context-free syntax
      Expression "++"            -> Expression {cons("PostInc"), layout("1.last.line==2.first.line")}
      Expression "--"            -> Expression {cons("PostDec"), layout("1.last.line==2.first.line")} 

    %% 11.4 Unary Expressions
    context-free syntax
      "delete" Expression        -> Expression {cons("Delete")}
      "void" Expression          -> Expression {cons("Void")}
      "typeof" Expression        -> Expression {cons("Typeof")}
      "++" Expression            -> Expression {cons("PreInc")}
      "--" Expression            -> Expression {cons("PreDec")}
      "+" Expression             -> Expression {cons("UnaryPlus")}
      "-" Expression             -> Expression {cons("UnaryMinus")}
      "~" Expression             -> Expression {cons("BitNot")}
      "!" Expression             -> Expression {cons("Not")}

    %% 11.5 Multiplicitive Operators
    context-free syntax
      Expression "*" Expression  -> Expression {cons("Times"), left}
      Expression "/" Expression  -> Expression {cons("Divide"), left}
      Expression "%" Expression  -> Expression {cons("Remainder"), left} 

    %% 11.6 Additive Operators
    context-free syntax
      Expression "+" Expression  -> Expression {cons("Plus"), left}
      Expression "-" Expression  -> Expression {cons("Minus"), left}

    %% 11.7 Bitwise Shift Operators
    context-free syntax
      Expression "<<" Expression  -> Expression {cons("LeftShift"), left}
      Expression ">>" Expression  -> Expression {cons("RightShift"), left}
      Expression ">>>" Expression -> Expression {cons("URightShift"), left}

    %% 11.8 Relational Operators
    sorts
      InExpression
      
    context-free syntax
      Expression "<" Expression          -> Expression {cons("LessThan"), left}
      Expression ">" Expression          -> Expression {cons("GreaterThan"), left}
      Expression "<=" Expression         -> Expression {cons("LessEquals"), left}
      Expression ">=" Expression         -> Expression {cons("GreateEquals"), left}
      Expression "instanceof" Expression -> Expression {cons("InstanceOf"), left}
      %% Keep track of in expressions as required elsewhere
      Expression "in" Expression         -> InExpression {cons("In"), left}
      InExpression                       -> Expression 

    %% 11.9 Equality Operators
    context-free syntax
      Expression "==" Expression  -> Expression {cons("Equals"), left}
      Expression "!=" Expression  -> Expression {cons("NotEquals"), left}
      Expression "===" Expression -> Expression {cons("StrictEquals"), left}
      Expression "!==" Expression -> Expression {cons("StrictNotEquals"), left}

    %% 11.10 Binary Bitwaise Operators
    context-free syntax
      Expression "&" Expression  -> Expression {cons("BitAnd"), left}
      Expression "^" Expression  -> Expression {cons("BitXor"), left}
      Expression "|" Expression  -> Expression {cons("BitOr"), left}
      
    %% 11.11 Binary Logical Operators
    context-free syntax
      Expression "&&" Expression -> Expression {cons("And"), left}
      Expression "||" Expression -> Expression {cons("Or"), left}

    %% 11.12 Conditional Operator
    context-free syntax
      Expression "?" Choice                        -> Expression {right, cons("Conditional")}
     AssignmentExpression ":" AssignmentExpression -> Choice {cons("Choice")}

    %% 11.13 Assignment Operators
    context-free syntax
      LeftHandSideExpression "=" Expression    -> Expression {cons("Assign")}
      LeftHandSideExpression "*=" Expression   -> Expression {cons("AssignMul")}
      LeftHandSideExpression "/=" Expression   -> Expression {cons("AssignDiv")}
      LeftHandSideExpression "%=" Expression   -> Expression {cons("AssignRem")}
      LeftHandSideExpression "+=" Expression   -> Expression {cons("AssignPlus")}
      LeftHandSideExpression "-=" Expression   -> Expression {cons("AssignMinus")}
      LeftHandSideExpression "<<=" Expression  -> Expression {cons("AssignLeftShift")}
      LeftHandSideExpression ">>=" Expression  -> Expression {cons("AssignRightShift")}
      LeftHandSideExpression ">>>=" Expression -> Expression {cons("AssignURightShift")}
      LeftHandSideExpression "&=" Expression   -> Expression {cons("AssignAnd")}
      LeftHandSideExpression "^=" Expression   -> Expression {cons("AssignXor")}
      LeftHandSideExpression "|=" Expression   -> Expression {cons("AssignOr")}
      Expression                               -> AssignmentExpression

    %% 11.14 Comma Operator
    context-free syntax
      Expression "," Expression -> Expression {cons("Comma"), left}

    lexical restrictions
      "+" -/- [\+]
      "-" -/- [\-]
      "/" -/- [\/]

module javascript-51/Priorities
  exports
     
    context-free priorities
    {
      Expression ArraySubscript  -> Expression
      Expression "." MemberName  -> Expression
      "new" Expression Arguments -> Expression
    }
    >
    {
      "new" Expression              -> NewExpression
      Expression Arguments          -> CallExpression
      CallExpression ArraySubscript -> CallExpression
      CallExpression "." MemberName -> CallExpression
    }
    >
    {
      NewExpression              -> Expression
      CallExpression             -> Expression
      Expression                 -> LeftHandSideExpression
    }
    >
    { right:
      Expression "++"            -> Expression
      Expression "--"            -> Expression
    } 
    >
    {
      "delete" Expression        -> Expression
      "void" Expression          -> Expression
      "typeof" Expression        -> Expression
      "++" Expression            -> Expression
      "--" Expression            -> Expression
      "+" Expression             -> Expression
      "-" Expression             -> Expression
      "~" Expression             -> Expression
      "!" Expression             -> Expression
    }
    >
    { left:
      Expression "*" Expression  -> Expression
      Expression "/" Expression  -> Expression
      Expression "%" Expression  -> Expression 
    }
    >
    { left:
      Expression "+" Expression  -> Expression
      Expression "-" Expression  -> Expression
    }
    >
    { left:
      Expression "<<" Expression  -> Expression
      Expression ">>" Expression  -> Expression
      Expression ">>>" Expression -> Expression
    }
    >
    { left:
      Expression "<" Expression          -> Expression
      Expression ">" Expression          -> Expression
      Expression "<=" Expression         -> Expression
      Expression ">=" Expression         -> Expression
      Expression "instanceof" Expression -> Expression
      %% Keep track of in expressions as required elsewhere
      Expression "in" Expression         -> InExpression
      InExpression                       -> Expression 
    }
    >
    { left:
      Expression "==" Expression  -> Expression 
      Expression "!=" Expression  -> Expression
      Expression "===" Expression -> Expression
      Expression "!==" Expression -> Expression
    }
    >
      Expression "&" Expression  -> Expression
    >
      Expression "^" Expression  -> Expression
    >
      Expression "|" Expression  -> Expression
    >
      Expression "&&" Expression -> Expression
    >
      Expression "||" Expression -> Expression
    >
      Expression "?" Choice      -> Expression
    >
    { right:
      LeftHandSideExpression "=" Expression    -> Expression
      LeftHandSideExpression "*=" Expression   -> Expression
      LeftHandSideExpression "/=" Expression   -> Expression
      LeftHandSideExpression "%=" Expression   -> Expression
      LeftHandSideExpression "+=" Expression   -> Expression
      LeftHandSideExpression "-=" Expression   -> Expression
      LeftHandSideExpression "<<=" Expression  -> Expression
      LeftHandSideExpression ">>=" Expression  -> Expression
      LeftHandSideExpression ">>>=" Expression -> Expression
      LeftHandSideExpression "&=" Expression   -> Expression
      LeftHandSideExpression "^=" Expression   -> Expression
      LeftHandSideExpression "|=" Expression   -> Expression
      Expression                               -> AssignmentExpression
    }
    >
      Expression "," Expression -> Expression
      
%% 12 Statements
module javascript-51/Statements
  exports
    sorts
      Block Statement VarDeclaration Initialiser ExpressionStatement 
      ExpressionNoIn AssignmentExpressionNoIn VarDeclarationNoIn InitialiserNoIn
      CaseClause Catch Finally
      
    context-free syntax
      %% 12.1 Block
      "{" Statement* "}" -> Block {cons("Block")}
      Block              -> Statement
      
      %% 12.2 Variable statement
      "var" {VarDeclaration ","}+  -> AutoSemiStatement {cons("Var")}
      Identifier                   -> VarDeclaration {cons("VarDec")}
      Identifier Initialiser       -> VarDeclaration {cons("VarDecInit")}
      "=" AssignmentExpression     -> Initialiser {cons("Init")}
      
      %% 12.3 Empty Statement
      ";" -> Statement {cons("Empty")}   
      
      %% 12.4 Expression Statement
      %% Reject expressions starting with { or 'function'
      %% Though this doesn't seem to work in all cases
      %% See bug at top of file
      Expression -> ExpressionStatement
      "{" ~[]* -> ExpressionStatement {reject}
      "function" ~[]* -> ExpressionStatement {reject}
      ExpressionStatement -> AutoSemiStatement {cons("Expression")}
      
      %% 12.5 if Statement
      "if" "(" Expression ")" Statement                  -> Statement {cons("If"), prefer}
      "if" "(" Expression ")" Statement "else" Statement -> Statement {cons("IfElse")}
      
      %% 12.6.1 do-while Statement
      "do" Statement "while" "(" Expression ")" -> AutoSemiStatement {cons("Do")}
      
      %% 12.6.2 while Statement
      "while" "(" Expression ")" Statement -> Statement {cons("While")}
      
      %% 12.6.3 for Statement
      "for" "(" ExpressionNoIn? ";" Expression? ";" Expression? ")" Statement                 -> Statement {cons("For")}
      "for" "(" "var" {VarDeclarationNoIn ","}+ ";" Expression? ";" Expression? ")" Statement -> Statement {cons("For")}
      
      %% 12.6.4 for-in Statement
      "for" "(" LeftHandSideExpression "in" Expression ")" Statement -> Statement {cons("ForIn")}
      "for" "(" "var" VarDeclarationNoIn "in" Expression ")" Statement   -> Statement {cons("ForIn")}
      
      %% Special NoIn expression variants used by for and for-in statements
      Expression                   -> ExpressionNoIn
      InExpression                 -> ExpressionNoIn {reject}
      AssignmentExpression         -> AssignmentExpressionNoIn
      InExpression                 -> AssignmentExpressionNoIn {reject}
      Identifier                   -> VarDeclarationNoIn {cons("VarDec")}
      Identifier InitialiserNoIn   -> VarDeclarationNoIn {cons("VarDecInit")}
      "=" AssignmentExpressionNoIn -> InitialiserNoIn {cons("Init")}
      
      %% 12.7 continue Statement
      "continue"            -> AutoSemiStatement {cons("Continue")}
      "continue" Identifier -> AutoSemiStatement {cons("Continue"), layout("1.first.line == 2.first.line")}
      
      %% 12.8 break Statement
      "break"            -> AutoSemiStatement {cons("Break")}
      "break" Identifier -> AutoSemiStatement {cons("Break"), layout("1.first.line == 2.first.line")}
      
      %% 12.9 return Statement
      "return"            -> AutoSemiStatement {cons("Return")}
      "return" Expression -> AutoSemiStatement {cons("Return"), layout("1.first.line == 2.first.line")}
     
      %% 12.10 with Statement
      "with" "(" Expression ")" Statement -> Statement {cons("With")}

      %% 12.11 switch Statement
      "switch" "(" Expression ")" "{" CaseClause* "}" -> Statement {cons("Switch")}
      "case" Expression ":" Statement*                -> CaseClause {cons("Case")}
      "default" ":" Statement*                        -> CaseClause {cons("Default")}
      
      %% 12.12 Labelled Statements
      Identifier ":" Statement -> Statement {cons("Labelled")}
      
      %% 12.13 throw Statement
      "throw" Expression -> AutoSemiStatement {cons("Throw"), layout("1.first.line == 2.first.line")}
      
      %% 12.14 try Statement
      "try" Block Catch                -> Statement {cons("TryCatch")}
      "try" Block Finally              -> Statement {cons("TryFinally")}
      "try" Block Catch Finally        -> Statement {cons("TryCatchFinally")}
      "catch" "(" Identifier ")" Block -> Catch {cons("Catch")}
      "finally" Block                  -> Finally {cons("Finally")}

      %% 12.15 debugger Statement
      "debugger" -> Statement {cons("Debugger")}
      
%% 13 Function Declaration
module javascript-51/Functions
  exports
    
    sorts
      FunctionDeclaration FunctionExpression FunctionBody

    context-free syntax
      "function" Identifier "(" {Identifier ","}* ")" "{" FunctionBody "}" -> FunctionDeclaration {cons("Function")}
      
      FunctionDeclaration                                       -> FunctionExpression
      "function" "(" {Identifier ","}* ")" "{" FunctionBody "}" -> FunctionExpression {cons("Lambda")}
      
      SourceElement* -> FunctionBody {cons("FunctionBody")}
   
%% 14 Program
module javascript-51/Program
  exports
    
    %% context-free start-symbols
    %%  Program
    
    sorts
      Program SourceElement
      
    context-free syntax
      SourceElement* -> Program {cons("Program")}

      FunctionDeclaration -> SourceElement
      Statement           -> SourceElement
 
module JavaScript-51
imports
  javascript-51/Program
  javascript-51/Functions
  javascript-51/Statements
  javascript-51/Expressions
  javascript-51/Priorities
  javascript-51/AutoSemiInsertion
  javascript-51/Literals
  javascript-51/Identifiers
  javascript-51/Layout
  
module org/sugarj/languages/JavaScript
imports JavaScript-51
  [ LineTerminatorSequence => JavaScriptLineTerminatorSequence
    CR => JavaScriptCR
    Asterisk => JavaScriptAsterisk
    Identifier=> JavaScriptIdentifier
    IdentifierName => JavaScriptIdentifierName
    Keyword => JavaScriptKeyword
    FutureReservedWord => JavaScriptFutureReservedWord
    ReservedWord => JavaScriptReservedWord
    Literal => JavaScriptLiteral
    NullLiteral => JavaScriptNullLiteral
    BooleanLiteral => JavaScriptBooleanLiteral
    NumericLiteral => JavaScriptNumericLiteral
    StringLiteral => JavaScriptStringLiteral
    RegExpLiteral => JavaScriptRegExpLiteral
    DecimalIntegerLiteral => JavaScriptDecimalIntegerLiteral
    DecimalLiteral => JavaScriptDecimalLiteral
    ExponentPart => JavaScriptExponentPart
    SignedInteger => JavaScriptSignedInteger
    HexIntegerLiteral => JavaScriptHexIntegerLiteral
    DoubleQuotedString => JavaScriptDoubleQuotedString
    SingleQuotedString => JavaScriptSingleQuotedString
    DoubleStringChar => JavaScriptDoubleStringChar
    SingleStringChar => JavaScriptSingleStringChar
    EscapeSequence => JavaScriptEscapeSequence
    Zero => JavaScriptZero
    RegExpBody => JavaScriptRegExpBody
    RegExpFlags => JavaScriptRegExpFlags
    RegExpFirstChar => JavaScriptRegExpFirstChar
    RegExpChar => JavaScriptRegExpChar
    RegExpBackslashSeq => JavaScriptRegExpBackslashSeq
    RegExpClass => JavaScriptRegExpClass
    RegExpClassChar => JavaScriptRegExpClassChar
    SemiStatement => JavaScriptSemiStatement
    AutoSemiStatement => JavaScriptAutoSemiStatement
    EOL => JavaScriptEOL
    EOB => JavaScriptEOB
    EOF => JavaScriptEOF
    Expression => JavaScriptExpression
    ArrayLiteral => JavaScriptArrayLiteral
    ArrayElement => JavaScriptArrayElement
    ObjectLiteral => JavaScriptObjectLiteral
    PropertyAssignment => JavaScriptPropertyAssignment
    PropertyName => JavaScriptPropertyName
    Expression => JavaScriptExpression
    Arguments => JavaScriptArguments
    MemberName => JavaScriptMemberName
    LeftHandSideExpression => JavaScriptLeftHandSideExpression
    InExpression => JavaScriptInExpression
    AssignmentExpression => JavaScriptAssignmentExpression
    Block => JavaScriptBlock
    Statement => JavaScriptStatement
    VarDeclaration => JavaScriptVarDeclaration
    Initialiser => JavaScriptInitialiser
    ExpressionStatement => JavaScriptExpressionStatement
    ExpressionNoIn => JavaScriptExpressionNoIn
    AssignmentExpressionNoIn => JavaScriptAssignmentExpressionNoIn
    VarDeclarationNoIn => JavaScriptVarDeclarationNoIn
    InitialiserNoIn => JavaScriptInitialiserNoIn
    CaseClause => JavaScriptCaseClause
    Catch => JavaScriptCatch
    Finally=> JavaScriptFinally
    FunctionDeclaration => JavaScriptFunctionDeclaration
    FunctionExpression => JavaScriptFunctionExpression
    FunctionBody=> JavaScriptFunctionBody
    Program => JavaScriptProgram
    SourceElement=> JavaScriptSourceElement
    ArraySubscript => JavaScriptArraySubscript
    Choice => JavaScriptChoice
    Parenthesis => JavaScriptParenthesis
    NewExpression => JavaScriptNewExpression
    CallExpression => JavaScriptCallExpression]
