[
   Identifier               -- _1,
   Null                     -- _1,
   Boolean                  -- _1,
   Number                   -- _1,
   String                   -- _1,
   RegExp                   -- _1,
   True                     -- KW["true"],
   False                    -- KW["false"],
   Decimal                  -- _1,
   HexInt                   -- _1,
   DoubleQuotedString       -- _1,
   SingleQuotedString       -- _1,
   SemiStm                  -- _1 KW[";"],
   NLStm                    -- _1 _2,
   EOFStm                   -- _1 _2,
   EOBStm                   -- _1 _2,
   This                     -- KW["this"],
   Array                    -- KW["["] KW["]"],
   Array                    -- KW["["] _1 KW["]"],
   Array.1:iter-sep         -- _1 KW[","],
   EmptyElement             -- ,
   Element                  -- _1,
   Object                   -- KW["{"] _1 KW["}"],
   Object.1:iter-star-sep   -- _1 KW[","],
   Object                   -- KW["{"] _1 KW[","] KW["}"],
   Object.1:iter-star-sep   -- _1 KW[","],
   PropertyAssignment       -- _1 KW[":"] _2,
   PropertyGet              -- KW["get"] _1 KW["("] KW[")"] KW["{"] _2 KW["}"],
   PropertySet              -- KW["set"] _1 KW["("] _2 KW[")"] KW["{"] _3 KW["}"],
   ArrayAccess              -- _1 KW["["] _2 KW["]"],
   MemberAccess             -- _1 KW["."] _2,
   NewArgs                  -- KW["new"] _1 _2,
   New                      -- KW["new"] _1,
   Call                     -- _1 _2,
   Call                     -- _1 _2,
   ArrayAccess              -- _1 KW["["] _2 KW["]"],
   MemberAccess             -- _1 KW["."] _2,
   Args                     -- KW["("] _1 KW[")"],
   Args.1:iter-star-sep     -- _1 KW[","],
   MemberName               -- _1,
   PostInc                  -- _1 KW["++"],
   PostDec                  -- _1 KW["--"],
   Delete                   -- KW["delete"] _1,
   Void                     -- KW["void"] _1,
   Typeof                   -- KW["typeof"] _1,
   PreInc                   -- KW["++"] _1,
   PreDec                   -- KW["--"] _1,
   UnaryPlus                -- KW["+"] _1,
   UnaryMinus               -- KW["-"] _1,
   BitNot                   -- KW["~"] _1,
   Not                      -- KW["!"] _1,
   Times                    -- _1 KW["*"] _2,
   Divide                   -- _1 KW["/"] _2,
   Remainder                -- _1 KW["%"] _2,
   Plus                     -- _1 KW["+"] _2,
   Minus                    -- _1 KW["-"] _2,
   LeftShift                -- _1 KW["<<"] _2,
   RightShift               -- _1 KW[">>"] _2,
   URightShift              -- _1 KW[">>>"] _2,
   LessThan                 -- _1 KW["<"] _2,
   GreaterThan              -- _1 KW[">"] _2,
   LessEquals               -- _1 KW["<="] _2,
   GreateEquals             -- _1 KW["<="] _2,
   InstanceOf               -- _1 KW["instanceof"] _2,
   In                       -- _1 KW["in"] _2,
   Equals                   -- _1 KW["=="] _2,
   NotEquals                -- _1 KW["!="] _2,
   StrictEquals             -- _1 KW["==="] _2,
   StrictNotEquals          -- _1 KW["!=="] _2,
   BitAnd                   -- _1 KW["&"] _2,
   BitXor                   -- _1 KW["^"] _2,
   BitOr                    -- _1 KW["|"] _2,
   And                      -- _1 KW["&&"] _2,
   Or                       -- _1 KW["||"] _2,
   Cond                     -- _1 KW["?"] _2 KW[":"] _3,
   Assign                   -- _1 KW["="] _2,
   AssignMul                -- _1 KW["*="] _2,
   AssignDiv                -- _1 KW["/="] _2,
   AssignRem                -- _1 KW["%="] _2,
   AssignPlus               -- _1 KW["+="] _2,
   AssignMinus              -- _1 KW["-="] _2,
   AssignLeftShift          -- _1 KW["<<="] _2,
   AssignRightShift         -- _1 KW[">>="] _2,
   AssignURightShift        -- _1 KW[">>>="] _2,
   AssignAnd                -- _1 KW["&="] _2,
   AssignXor                -- _1 KW["^="] _2,
   AssignOr                 -- _1 KW["|="] _2,
   Comma                    -- _1 KW[","] _2,
   Block                    -- V  [V vs=2 [KW["{"] _1] KW["}"]],
   Block.1:iter-star        -- _1,
   Var                      -- V  [H  [KW["var"]] _1],
   Var.1:iter-sep           -- _1 KW[","],
   VarDec                   -- _1,
   VarDecInit               -- _1 _2,
   Init                     -- KW["="] _1,
   Empty                    -- KW[";"],
   Expression               -- _1,
   If                       -- KW["if"] KW["("] _1 KW[")"] _2,
   IfElse                   -- KW["if"] KW["("] _1 KW[")"] _2 KW["else"] _3,
   Do                       -- KW["do"] _1 KW["while"] KW["("] _2 KW[")"],
   While                    -- KW["while"] KW["("] _1 KW[")"] _2,
   For                      -- KW["for"] KW["("] _1 KW[";"] _2 KW[";"] _3 KW[")"] _4,
   For.1:opt                -- _1,
   For.2:opt                -- _1,
   For.3:opt                -- _1,
   For                      -- KW["for"] KW["("] KW["var"] _1 KW[";"] _2 KW[";"] _3 KW[")"] _4,
   For.1:iter-sep           -- _1 KW[","],
   For.2:opt                -- _1,
   For.3:opt                -- _1,
   ForIn                    -- KW["for"] KW["("] _1 KW["in"] _2 KW[")"] _3,
   ForIn                    -- KW["for"] KW["("] KW["var"] _1 KW["in"] _2 KW[")"] _3,
   VarDec                   -- _1,
   VarDecInit               -- _1 _2,
   Init                     -- KW["="] _1,
   Continue                 -- KW["continue"],
   Continue                 -- KW["continue"] _1,
   Break                    -- KW["break"],
   Break                    -- KW["break"] _1,
   Return                   -- KW["return"],
   Return                   -- KW["return"] _1,
   With                     -- KW["with"] KW["("] _1 KW[")"] _2,
   Switch                   -- KW["switch"] KW["("] _1 KW[")"] KW["{"] _2 KW["}"],
   Switch.2:iter-star       -- _1,
   Case                     -- KW["case"] _1 KW[":"] _2,
   Case.2:iter-star         -- _1,
   Default                  -- V  [H  [KW["default"] KW[":"]] _1],
   Default.1:iter-star      -- _1,
   Labelled                 -- _1 KW[":"] _2,
   Throw                    -- KW["throw"] _1,
   TryCatch                 -- KW["try"] _1 _2,
   TryFinally               -- KW["try"] _1 _2,
   TryCatchFinally          -- KW["try"] _1 _2 _3,
   Catch                    -- KW["catch"] KW["("] _1 KW[")"] _2,
   Finally                  -- KW["finally"] _1,
   Debugger                 -- KW["debugger"],
   Function                 -- KW["function"] _1 KW["("] _2 KW[")"] KW["{"] _3 KW["}"],
   Function.2:iter-star-sep -- _1 KW[","],
   Lambda                   -- KW["function"] KW["("] _1 KW[")"] KW["{"] _2 KW["}"],
   Lambda.1:iter-star-sep   -- _1 KW[","],
   FunctionBody             -- _1,
   FunctionBody.1:iter-star -- _1,
   Program                  -- _1,
   Program.1:iter-star      -- _1
]